from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from database.db import init_database
from database.queries import create_user, get_user, get_all_products, delete_product
from database.seeds import seed_products

# –¢–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = "7514093364:AAGGHIabFBhurOFDtQW-92_wOA6e4x8MZuc"

SERVICES = {
    'basic': {'name': '–•—É–π', 'price': 100000},   # 1000 —Ä—É–±
    'premium': {'name': '–ü–µ–Ω–∏—Å', 'price': 250000}, # 2500 —Ä—É–±
    'vip': {'name': '–ß–ª–µ–Ω', 'price': 500000},     # 5000 —Ä—É–±
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_user = update.effective_user
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    create_user(
        user_id=telegram_user.id,
        username=telegram_user.username,
        first_name=telegram_user.first_name,
        last_name=telegram_user.last_name
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    saved_user = get_user(telegram_user.id)  # –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ç—ã –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ database/queries.py
    if saved_user:
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î: {saved_user}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

    keyboard = [
        [InlineKeyboardButton("üí∞ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data="services")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(

        f"–ü—Ä–∏–≤–µ—Ç, {telegram_user.first_name or telegram_user.username or '–¥—Ä—É–≥'}! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
async def show_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = []
    for service_id, service in SERVICES.items():
        price_rub = service['price'] / 100  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä—É–±–ª–∏
        keyboard.append([
            InlineKeyboardButton(
                f"{service['name']} - {price_rub} —Ä—É–±",
                callback_data=f"buy_{service_id}"
            )
        ])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:\n\n"
        "‚Ä¢ –•—É–π –≤ –∂–æ–ø–µ - 1000 —Ä—É–±\n"
        "‚Ä¢ –ü–µ–Ω–∏—Å –≤ –≥–æ—Ä–ª–µ - 2500 —Ä—É–±\n"
        "‚Ä¢ –ß–ª–µ–Ω –≤ —É—Ö–µ - 5000 —Ä—É–±",
        reply_markup=reply_markup
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–º–æ—â—å + –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    await query.edit_message_text(
        text="üÜò –ü–æ–º–æ—â—å:\n\n"
             "–ë—Ä–æ, –∑–∞ –ø–æ–º–æ—â—å—é –º–æ–∂–µ—à—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Å—é–¥–∞ @zephiel",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞–∑–∞–¥"
async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üí∞ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data="services")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=reply_markup
    )

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_database()
    print("–ì–æ—Ç–æ–≤–æ! –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ data/")



    print(get_all_products())

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(show_services, pattern="^services$"))
    application.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    application.add_handler(CallbackQueryHandler(handle_back, pattern="^back$"))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()